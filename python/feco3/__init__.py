from __future__ import annotations
from dataclasses import dataclass
from functools import cached_property

import os

import _feco3

@dataclass
class Header:
    fec_version: str
    software_name: str
    software_version: str | None
    report_id: str | None
    report_number: str | None

@dataclass
class Cover:
    form_type: str
    filer_committee_id: str

class FecFile:

    def __init__(self, src: str | os.PathLike) -> None:
        """Create a new FecFile instance.

        Args:
            src: The path to the FEC file to parse.
        """
        # An instance of _feco3.FecFile, which is the class generated by pyo3
        self._src = src
        self._wrapped = _feco3.FecFile.from_path(src)

    @cached_property
    def header(self) -> Header:
        h = self._wrapped.header
        return Header(
            fec_version=h.fec_version,
            software_name=h.software_name,
            software_version=h.software_version,
            report_id=h.report_id,
            report_number=h.report_number,
        )

    @cached_property
    def cover(self) -> Cover:
        c = self._wrapped.cover
        return Cover(
            form_type=c.form_type,
            filer_committee_id=c.filer_committee_id,
        )


    def __repr__(self) -> str:
        src_str = f"src={self._src!r}"
        return f"{self.__class__.__name__}({src_str})"



class ParquetProcessor:

    def __init__(self, out_dir: str | os.PathLike) -> None:
        self._wrapped = _feco3.ParquetProcessor(out_dir)

    def process(self, fec_file: FecFile) -> None:
        self._wrapped.process(fec_file._wrapped)
